name: Python CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Git Version
      run: |
        git --version
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv==2018.11.26
        pipenv install --dev --system --ignore-pipfile
    - name: Code formatting with black
      run: |
        black -l 127 --check --diff .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Create KinD cluster
      run: |
        kind/manage-cluster.sh -c
    - name: Test with nose
      run: |
        nosetests --with-coverage --cover-package=kubernetes_py --cover-xml-file=coverage-${{ matrix.python-version }}.xml --with-xunit --xunit-file=nosetests-${{ matrix.python-version }}.xml
        if [ -n "${COVERALLS_REPO_TOKEN}" ]; then
          coveralls
        fi
    - name: Upload test results
      if: success() || failure()
      uses: actions/upload-artifact@master
      with:
        name: nosetest-results-${{ matrix.python-version }}
        path: nosetests-${{ matrix.python-version }}.xml
    - name: Delete KinD cluster
      run: |
        kind/manage-cluster.sh -d
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.repository == 'mnubo/kubernetes-py' && github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: "3.8"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv==2018.11.26
        pipenv install --dev --system --ignore-pipfile
    - name: Create and publish release
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        remote_repo="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git config http.sslVerify false
        git config user.name "GitHub Actions CI/CD"
        git config user.email "actions@users.noreply.github.com"
        git remote add writeorigin "${remote_repo}"
        next_version=$(python -m version_query -i .)
        git tag -a -m "chore(release): Releasing version ${next_version}" "${next_version}" "${GITHUB_SHA}"
        git push writeorigin "${next_version}"
        python setup.py sdist bdist_wheel
        twine upload dist/*
     